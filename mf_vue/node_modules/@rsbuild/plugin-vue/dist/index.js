import { createRequire } from "node:module";
import { VueLoaderPlugin } from "vue-loader";
let src_require = createRequire(import.meta.url), PLUGIN_VUE_NAME = 'rsbuild:vue';
function pluginVue(options = {}) {
    return {
        name: PLUGIN_VUE_NAME,
        setup (api) {
            let VUE_REGEXP = /\.vue$/, CSS_MODULES_REGEX = /\.modules?\.\w+$/i;
            api.modifyEnvironmentConfig((config, { mergeEnvironmentConfig })=>{
                let merged = mergeEnvironmentConfig({
                    source: {
                        define: {
                            __VUE_OPTIONS_API__: !0,
                            __VUE_PROD_DEVTOOLS__: !1,
                            __VUE_PROD_HYDRATION_MISMATCH_DETAILS__: !1
                        },
                        include: [
                            /\.vue.js$/
                        ]
                    }
                }, config);
                return !0 === merged.output.cssModules.auto && (merged.output.cssModules.auto = (path, query)=>VUE_REGEXP.test(path) || path.includes('.vue.css') ? query.includes('type=style') && query.includes('module=true') : CSS_MODULES_REGEX.test(path)), merged;
            }), api.modifyBundlerChain(async (chain, { CHAIN_ID })=>{
                chain.resolve.extensions.add('.vue');
                let userLoaderOptions = options.vueLoaderOptions ?? {}, compilerOptions = {
                    preserveWhitespace: !1,
                    ...userLoaderOptions.compilerOptions
                }, vueLoaderOptions = {
                    experimentalInlineMatchResource: !0,
                    ...userLoaderOptions,
                    compilerOptions
                };
                chain.module.rule(CHAIN_ID.RULE.VUE).test(VUE_REGEXP).use(CHAIN_ID.USE.VUE).loader(src_require.resolve('vue-loader')).options(vueLoaderOptions), chain.module.rule(CHAIN_ID.RULE.CSS).test(/\.(?:css|postcss|pcss)$/), chain.plugin(CHAIN_ID.PLUGIN.VUE_LOADER_PLUGIN).before(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(VueLoaderPlugin);
            }), ((api, options = {
                vue: !0,
                router: !0
            })=>{
                api.modifyBundlerChain((chain, { environment })=>{
                    let { config } = environment;
                    if ('split-by-experience' !== config.performance.chunkSplit.strategy) return;
                    let currentConfig = chain.optimization.splitChunks.values();
                    if (null === currentConfig || 'object' != typeof currentConfig || '[object Object]' !== Object.prototype.toString.call(currentConfig)) return;
                    let extraGroups = {};
                    options.vue && (extraGroups.vue = {
                        name: 'lib-vue',
                        test: /node_modules[\\/](?:vue|vue-loader|@vue[\\/]shared|@vue[\\/]reactivity|@vue[\\/]runtime-dom|@vue[\\/]runtime-core)[\\/]/,
                        priority: 0
                    }), options.router && (extraGroups.router = {
                        name: 'lib-router',
                        test: /node_modules[\\/]vue-router[\\/]/,
                        priority: 0
                    }), Object.keys(extraGroups).length && chain.optimization.splitChunks({
                        ...currentConfig,
                        cacheGroups: {
                            ...extraGroups,
                            ...currentConfig.cacheGroups
                        }
                    });
                });
            })(api, options.splitChunks);
        }
    };
}
export { PLUGIN_VUE_NAME, pluginVue };
